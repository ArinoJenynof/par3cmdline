
 I write some updating points in Parity Volume Set Specification 3.0.
This is a reminder for later implementation.



##### Start packet

 It's possible to remove the first field (a globally unique random number).
The unique random number is set to randomize InputSetID internally.
No need to store the number in Start Packet, because it's not refered later.


*Old table: Start Packet Body Contents*

| Length (bytes) | Type | Description |
|---------------:|:-----|:------------|
|  8 | Random | A globally unique random number |
|  8 | InputSetID | The "parent" InputSetID, or zeros if none. |
| 16 | fingerprint hash | The checksum of the parent's Root packet, or zeros if none. |
|  8 | unsigned int | Block size in bytes |
|  1 | unsigned int | The size of the Galois field in bytes. |
|  ? | ?-byte GF | The generator of the Galois field without its leading 1. |


*Table: Start Packet Body Contents*

| Length (bytes) | Type | Description |
|---------------:|:-----|:------------|
|  8 | InputSetID | The "parent" InputSetID, or zeros if none. |
| 16 | fingerprint hash | The checksum of the parent's Root packet, or zeros if none. |
|  8 | unsigned int | Block size in bytes |
|  1 | unsigned int | The size of the Galois field in bytes. |
|  ? | ?-byte GF | The generator of the Galois field without its leading 1. |



#### File Packet

 It will be possible to use other fingerprint hashes as options in future.
(For example, I may make a new packet type, Hash Packet.)
If it doesn't use BLAKE3 for the input file, the fourth field is all zeroes.
Even when this packet doesn't contain BLAKE3 hash for the protected data in the file,
it can verify files by using checksums for input blocks in External Data Packet.



##### UNIX Permissions Packet

 I changed the default value for i_mode.
By doing this change, all non used values are same 0xff bytes.
It's easy to see which value is set or not.


*Old table: UNIX Permissions Packet Unset Values

| Field | Unset Value |
|------:|------------:|
| atime, ctime, mtime | 2^64-1 (maximum unsigned value) |
| UID, GID | 2^32-1 (maximum unsigned value) |
| i_mode | 0x0180 (owner read+write) |
| owner name, group name | empty string | 
| xattr | empty list |


*Table: UNIX Permissions Packet Unset Values

| Field | Unset Value |
|------:|------------:|
| atime, ctime, mtime | 2^64-1 (maximum unsigned value) |
| UID, GID | 2^32-1 (maximum unsigned value) |
| i_mode | 0xffff | value to indicate unset
| owner name, group name | empty string | 
| xattr | empty list |



##### FAT Permissions Packet

 I changed the default value for FileAttributes.
By doing this change, all non used values are same 0xff bytes.
It's easy to see which value is set or not.


*Old table: FAT Permissions Packet Unset Values

| Field | Unset Value |
|------:|------------:|
| CreationTimestamp, LastAccessTimestamp, LastWriteTimestamp |  2^64-1 (maximum unsigned value)  |
| FileAttributes | 0 | 


*Table: FAT Permissions Packet Unset Values

| Field | Unset Value |
|------:|------------:|
| CreationTimestamp, LastAccessTimestamp, LastWriteTimestamp |  2^64-1 (maximum unsigned value)  |
| FileAttributes | 0xffff | value to indicate unset



##### FFT Matrix Packet

 I made this packet for test.
This will be changed later.

 The last field is for max number of recovery blocks.
The value is important, because different max value makes incompatible recovery blocks.
If you have a plan to add more recovery blocks later,
you must set the max number for the possible creating blocks.

 It uses power of 2 for max number of recovery blocks.
Currently, the value is exponent of power for Low Rate encoder.
The value is like below;

Stored value | Max number of recovery blocks
   0         |     1
   1         |     2
   2         |     4
   3         |     8
   4         |    16
   5         |    32
   6         |    64
   7         |   128
   8         |   256
   9         |   512
  10         |  1024
  11         |  2048
  12         |  4096
  13         |  8192
  14         | 16384
  15         | 32768


 It will be different format for High Rate encoder in future.
Negative value indicates High Rate encoder.
At this time, it doesn't support High Rate encoding yet.

Stored value | Max number of recovery blocks
   -1        | 2 - NextPow2(number of input blocks)
   -2        | 4 - NextPow2(number of input blocks)
   -3        | 8 - NextPow2(number of input blocks)
...
  -15        | 32768 - NextPow2(number of input blocks)
  -16        | 65536 - NextPow2(number of input blocks)

NextPow2() function returns next power of two at or above given value.

 For example, when there are 100 input blocks,
NextPow2(number of input blocks) = NextPow2(100) = 128.

Stored value | Max number of recovery blocks
   -8        | 256 - 128 = 128
   -9        | 512 - 128 = 384

 For example, when there are 1000 input blocks,
NextPow2(number of input blocks) = NextPow2(1000) = 1024.

Stored value | Max number of recovery blocks
  -11        | 2048 - 1024 = 1024
  -12        | 4096 - 1024 = 3072
  -13        | 8192 - 1024 = 7168



The FFT matrix packet has a type value of "PAR FFT\0" (ASCII). The packet's body contains the following:

*Table: FFT Packet Body Contents*

| Length (bytes) | Type | Description |
|---------------:|:-----|:------------|
| 8 | unsigned int | Index of first input block |
| 8 | unsigned int | Index of last input block plus 1 |
| 1 | signed int   | max number of blocks (as power of 2) |

