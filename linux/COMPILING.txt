This is currently a log of things I've done to make par3cmdline compile under Linux.

Moved README.txt to README.
Created man/par3.1 (copied and edited par2's version).
Created Makefile.am
Created configure.ac

ran:
  echo timestamp > stamp-h.in  
  autoreconf --install
  ./configure
  make



MinGW/WINE
	If you are on a UNIX box and want to check the Windows code,
	you can compile using MinGW and run using WINE.  MinGW is a
	package for compiling with GCC against Windows libraries.
	WINE is a Windows simulator.  

	To compile with MinGW, I use the commands:
	make clean	 
	./configure --host=x86_64-w64-mingw32
	make

	To run Par2 with WINE, you need to tell it where
	MinGW's copy of the DLLs are.  Start by trying to
	run WINE by putting "wine" in front of your
	par.exe command:
	wine ./par2.exe create foo.par2 input1.txt input2.txt
	If you get a warning about "libgomp.dll" or any other
	DLL, use this command:
	x86_64-w64-mingw32-g++ --print-file-name=libgomp.dll
	which will tell you where to find MinGW's libgomp.dll.
	You then convert that Linux path to WINE's Windows path
	by running the command:
	winepath <directory_with_DLLs>
	On my machine, it just adds "z:" in front of the Linux
	path.  You tell WINE about all the DLL directories by
	putting those paths into the environment variable
	WINEPATH, separated by semi-colons.  I use:
	export WINEPATH="z:/usr/lib/gcc/x86_64-w64-mingw32/7.3-win32/;z:/usr/x86_64-w64-mingw32/lib/"
	Then, you should be able to run "wine par2.exe --help"
	to test that it works.

	If WINE is working, you can run tests in WINE with
	the command:
	make check

	WARNING: If the tests see that par2 or the unit tests have
	an ".exe" extension, they will be automatically run with
	WINE.  When switching from MinGW to normal GCC, you need
	to run "make clean" or the tests may run the wrong version
	(or run both versions).

